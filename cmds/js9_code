#! /usr/bin/env python3

from js9 import j
import os
os.environ["LC_ALL"] = 'en_US.UTF-8'

print(j.do.mascot)


#!/usr/bin/env jspython
import os
import sys
import click

# from js9 import j

j.application.start("jscode2")

ACTIONS = ('commit', 'push', 'update', 'status', 'list', 'init')


def _repo_info(name, accounts):
    if j.do.exists("%s/%s" % (j.do.getcwd(), ".git")):
        # we are in repo
        _name = j.do.getBaseName(j.do.getcwd())
        _accounts = j.do.getBaseName(j.do.getParent(j.do.getcwd()))
        return _name, _accounts
    return name, accounts


def _init_action():
    username = input('Git Username: ')
    email = input('Git Email: ')
    j.do._.loadSSHAgent(createkeys=False, keyname=username)
    os.system('git config --global user.name "%s"' % username)
    os.system('git config --global user.email "%s"' % email)
    print('Please logout and relogin for your ssh keys to be loaded')
    sys.exit(0)


def _search_repos(accounts, name, interactive=True):
    repos = j.clients.git.find(accounts, name, interactive=interactive, returnGitClient=True)
    _repos = [(r.type, r.account, r.name, r.branchName, r, r.BASEDIR) for r in repos]
    if j.core.platformtype.myplatform.isLinux:
        C = """
        Host *
           StrictHostKeyChecking no
           UserKnownHostsFile=/dev/null
        """
        path = j.do.joinPaths(os.environ["HOME"], ".ssh", "config")
        if not j.do.exists(path):
            j.do.writeFile(path, C)
    return _repos


def _status_action():
    print("\n\nSTATUS: account reponame                  " +
          "branch added:modified:deleted   insyncwithremote?   localrev       remoterev")
    print("==============================================" +
          "===========================================================================")


@click.command()
@click.argument('action', type=click.Choice(ACTIONS))
@click.option('--name', '-n', help='name or partial name of repo, can also be comma separated, if not specified then will ask, if \'*\' then all.')
@click.option('--url', help='url')
@click.option('--message', '-m', help='commit message', default="new")
@click.option('--branch', '-b', help='branch')
@click.option('--accounts', '-a', help='comma separated list of accounts, if not specified then will ask, if \'*\' then all.')
@click.option('--update', '-u', help='update merge before doing push or commit')
@click.option('--force', '-f', help='auto answer yes on every question', is_flag=True, type=bool, default=False)
@click.option('--deletechanges', '-d', help='will delete all changes when doing update')
@click.option('--onlychanges', '-o',  help='will only do an action where modified files are found')
def jscode(action, name, url, message, branch, accounts, update, force=False, deletechanges=False, onlychanges=False):
    """Wrapper to git to do operations on multiple repositories"""
    if force is None:
        force = False
    if branch is not None and action in ['status']:
        raise j.exceptions.RuntimeError("Cannot specify branch when asking status")

    if name is None and accounts is None:
        _name, _accounts = _repo_info(name, accounts)

    if action == 'init':
        _init_action()

    if action == 'status':
        _status_action()
    repos = _search_repos(accounts, name, interactive=not force)

    for provider, account, reponame, branchExisting, client, path in repos:

        if not client.remoteUrl.startswith("git"):
            newUrl = j.clients.git.rewriteGitRepoUrl(client.remoteUrl)[-1]
            client.setRemoteURL(newUrl)

        if action == "update" and deletechanges:
            print(("force update %s/%s/%s" % (provider, account, reponame)))
            # cmd = 'cd %s; git checkout .' % path
            # j.sal.process.execute(cmd)
            # j.do.pullGitRepo(url=client.remoteUrl)
            client.update(force=True)
            continue

        nrmods = 0
        if action in ['status', 'commit', 'update', 'push']:

            mods = client.getModifiedFiles()

            nrmods = len(mods["D"]) + len(mods["M"]) + len(mods["N"]) + len(mods["R"])

            if onlychanges and nrmods == 0:
                if action != 'update' and action != 'update':
                    continue

            # if branch is not None:
            #     if branch != client.branchName:
            #         print(("set branch:%s" % branch))
            #         client.switchBranch(branch, create=True)

            # lrev = client.repo.head.commit.hexsha
            branch = client.branchName

            # reposync = "?"
            # remotelastrevision = "?"

            if nrmods > 0:
                reposync = "N"

            print("%-15s %-25s %-10s n%-3s:m%-3s:d%-3s:r%-6s" %
                  (account, reponame, client.branchName, len(mods["N"]), len(mods["M"]), len(mods["D"]),
                   len(mods["R"])))

        if action in ['commit', 'update', 'push']:
            if nrmods == 0:
                print("no need to commit/push is in sync")
                continue
            if nrmods > 0:
                print("MODS:")
                for key, item in list(mods.items()):
                    if len(item) > 0:
                        print((" %s" % key))
                        for subitem in item:
                            print(("    - %s" % (subitem)))

        if action in ['commit', 'update', 'push']:
            if nrmods > 0:
                if message is None:
                    message = j.tools.console.askString("commit message")
                else:
                    message = message

                print("ADD/REMOVE/COMMIT")
                client.commit(message=message, addremove=True)

        if update or action in ['commit', 'update', 'push']:
            print("PULL")
            j.do.pullGitRepo(url=client.remoteUrl)

        if action == "push":
            print(("push git repo:%s" % path))
            client.push()


jscode()

j.application.stop()
